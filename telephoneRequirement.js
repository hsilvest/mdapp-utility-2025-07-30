/*
 * telephoneRequirement.js
 *
 * This script adds client‑side logic to a model‑driven Power Apps form.
 * When a user selects "Telephone" as their preferred contact method, the
 * phone number field is automatically set to required and an informational
 * notification is displayed.  Otherwise the phone number becomes optional
 * and the notification is cleared.
 *
 * Author: Henrique (Generated by assistant on 2025‑07‑30)
 *
 * Usage:
 * 1. Register `MyCRM.ContactForm.onLoad` on the form’s `onLoad` event.
 * 2. Ensure the execution context is passed to the onLoad function.
 * 3. The script will attach an onChange handler to the preferred contact
 *    method field automatically; no further registration is required.
 */

// Wrap everything in a namespace to avoid polluting the global scope.  If
// `MyCRM` already exists, we reuse it; otherwise we create a new object.
var MyCRM = MyCRM || {};

// Define a sub‑namespace for contact form logic.  The logical separation
// helps organize scripts for different entities and reduces the risk of
// naming collisions.
MyCRM.ContactForm = (function () {
    "use strict";

    // Constant representing the option set value for "Telephone".
    // In a standard Dynamics 365 deployment the value is 2, but this
    // can vary in customized environments.  Update this value if your
    // option set differs.
    var PREFERRED_METHOD_PHONE = 2;

    // Unique identifier for the form notification used by this script.
    var NOTIFICATION_ID = "phoneRequirement";

    /**
     * Entry point for the form onLoad event.  This function obtains the
     * form context from the execution context, wires up the onChange
     * event for the preferred contact method field, and sets the initial
     * state of the phone requirement.
     *
     * @param {object} executionContext The execution context provided by the
     *     form event.  It contains methods to access the form context and
     *     other useful services.
     */
    function onLoad(executionContext) {
        // Validate that the execution context is provided.
        if (!executionContext || typeof executionContext.getFormContext !== "function") {
            // Gracefully exit if the context is not available; this protects
            // against runtime errors in unexpected scenarios.
            return;
        }

        var formContext = executionContext.getFormContext();

        // Ensure that the necessary attributes exist before attempting to
        // register events.  If either attribute is missing, we exit early.
        var preferredAttr = formContext.getAttribute("preferredcontactmethodcode");
        var telephoneAttr = formContext.getAttribute("telephone1");
        if (!preferredAttr || !telephoneAttr) {
            return;
        }

        // Set initial requirement level based on the current value.  This
        // handles scenarios where the form is loaded with existing data.
        toggleTelephoneRequirement(formContext);

        // Register an onChange event handler to keep the requirement level
        // in sync when the user changes the preferred contact method.
        preferredAttr.addOnChange(onPreferredContactChange);

        /**
         * Inner handler for the preferred contact method onChange event.
         * Declared inside onLoad to close over the formContext variable.  If
         * the handler were declared at the namespace level, it would need
         * additional logic to resolve the correct form context.
         */
        function onPreferredContactChange() {
            toggleTelephoneRequirement(formContext);
        }
    }

    /**
     * Helper function that sets the required level of the phone number
     * based on the selected preferred contact method.  If the user
     * selects Telephone (as defined by PREFERRED_METHOD_PHONE), the
     * phone number becomes mandatory and a notification is displayed.
     * Otherwise the phone number becomes optional and the notification
     * is cleared.
     *
     * @param {object} formContext The form context object obtained from
     *     the execution context; provides access to attributes and UI.
     */
    function toggleTelephoneRequirement(formContext) {
        // Retrieve the attribute objects.  We re‑fetch them here rather than
        // relying on variables captured in onLoad to make the helper more
        // generally reusable.
        var preferredAttr = formContext.getAttribute("preferredcontactmethodcode");
        var telephoneAttr = formContext.getAttribute("telephone1");

        // Verify that the attributes exist to avoid null reference errors.
        if (!preferredAttr || !telephoneAttr) {
            return;
        }

        var preferredValue = preferredAttr.getValue();

        // When no option is selected (null) we treat it as non‑phone.
        var isPhone = Array.isArray(preferredValue)
            ? preferredValue.indexOf(PREFERRED_METHOD_PHONE) !== -1
            : preferredValue === PREFERRED_METHOD_PHONE;

        if (isPhone) {
            telephoneAttr.setRequiredLevel("required");
            formContext.ui.setFormNotification(
                "Telephone is required when the preferred contact method is set to Telephone.",
                "INFO",
                NOTIFICATION_ID
            );
        } else {
            telephoneAttr.setRequiredLevel("none");
            formContext.ui.clearFormNotification(NOTIFICATION_ID);
        }
    }

    // Expose public functions from this module.  Only the onLoad and
    // toggleTelephoneRequirement functions are publicly accessible.
    return {
        onLoad: onLoad,
        toggleTelephoneRequirement: toggleTelephoneRequirement
    };
})();
